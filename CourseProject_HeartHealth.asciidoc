+*In[746]:*+
[source, ipython3]
----
from __future__ import division, print_function, unicode_literals
import numpy as np
import os
import pandas as pd

%matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier

heart = pd.read_csv('heart.csv')
heart.head()
----


+*Out[746]:*+
----
[cols=",,,,,,,,,,,,,,",options="header",]
|===
| |age |sex |cp |trestbps |chol |fbs |restecg |thalach |exang |oldpeak
|slope |ca |thal |target
|0 |63 |1 |3 |145 |233 |1 |0 |150 |0 |2.3 |0 |0 |1 |1

|1 |37 |1 |2 |130 |250 |0 |1 |187 |0 |3.5 |0 |0 |2 |1

|2 |41 |0 |1 |130 |204 |0 |0 |172 |0 |1.4 |2 |0 |2 |1

|3 |56 |1 |1 |120 |236 |0 |1 |178 |0 |0.8 |2 |0 |2 |1

|4 |57 |0 |0 |120 |354 |0 |1 |163 |1 |0.6 |2 |0 |2 |1
|===
----


+*In[747]:*+
[source, ipython3]
----
heart.shape
----


+*Out[747]:*+
----(303, 14)----


+*In[748]:*+
[source, ipython3]
----
heart.rename(columns={'age':'Age','sex':'Sex','cp':'ChestPainSeverity','trestbps':'RestingBloodPressure','chol':'Cholesterol','fbs':'FastingBloodSugar'
                     ,'restecg':'RestingECG','thalach':'MaximumHeartRate','exang':'ExerciseInducedAngina','oldpeak':'OldPeak','ca':'ColoredVessels',
                   'thal':'ThalassemiaType','target':'HeartAttack','slope':'Slope'},
inplace = True) #replaces given table titles with new ones
----


+*In[749]:*+
[source, ipython3]
----
heart.head()
----


+*Out[749]:*+
----
[cols=",,,,,,,,,,,,,,",options="header",]
|===
| |Age |Sex |ChestPainSeverity |RestingBloodPressure |Cholesterol
|FastingBloodSugar |RestingECG |MaximumHeartRate |ExerciseInducedAngina
|OldPeak |Slope |ColoredVessels |ThalassemiaType |HeartAttack
|0 |63 |1 |3 |145 |233 |1 |0 |150 |0 |2.3 |0 |0 |1 |1

|1 |37 |1 |2 |130 |250 |0 |1 |187 |0 |3.5 |0 |0 |2 |1

|2 |41 |0 |1 |130 |204 |0 |0 |172 |0 |1.4 |2 |0 |2 |1

|3 |56 |1 |1 |120 |236 |0 |1 |178 |0 |0.8 |2 |0 |2 |1

|4 |57 |0 |0 |120 |354 |0 |1 |163 |1 |0.6 |2 |0 |2 |1
|===
----


+*In[750]:*+
[source, ipython3]
----
###heart['Sex'].replace({1:'Male',0:'Female'},inplace = True)
----


+*In[751]:*+
[source, ipython3]
----
##heart['HeartAttack'].replace({1:'Yes',0:'No'},inplace = True)
----


+*In[752]:*+
[source, ipython3]
----
heart.head() #shows updated table
----


+*Out[752]:*+
----
[cols=",,,,,,,,,,,,,,",options="header",]
|===
| |Age |Sex |ChestPainSeverity |RestingBloodPressure |Cholesterol
|FastingBloodSugar |RestingECG |MaximumHeartRate |ExerciseInducedAngina
|OldPeak |Slope |ColoredVessels |ThalassemiaType |HeartAttack
|0 |63 |1 |3 |145 |233 |1 |0 |150 |0 |2.3 |0 |0 |1 |1

|1 |37 |1 |2 |130 |250 |0 |1 |187 |0 |3.5 |0 |0 |2 |1

|2 |41 |0 |1 |130 |204 |0 |0 |172 |0 |1.4 |2 |0 |2 |1

|3 |56 |1 |1 |120 |236 |0 |1 |178 |0 |0.8 |2 |0 |2 |1

|4 |57 |0 |0 |120 |354 |0 |1 |163 |1 |0.6 |2 |0 |2 |1
|===
----


+*In[753]:*+
[source, ipython3]
----
heart.describe()
----


+*Out[753]:*+
----
[cols=",,,,,,,,,,,,,,",options="header",]
|===
| |Age |Sex |ChestPainSeverity |RestingBloodPressure |Cholesterol
|FastingBloodSugar |RestingECG |MaximumHeartRate |ExerciseInducedAngina
|OldPeak |Slope |ColoredVessels |ThalassemiaType |HeartAttack
|count |303.000000 |303.000000 |303.000000 |303.000000 |303.000000
|303.000000 |303.000000 |303.000000 |303.000000 |303.000000 |303.000000
|303.000000 |303.000000 |303.000000

|mean |54.366337 |0.683168 |0.966997 |131.623762 |246.264026 |0.148515
|0.528053 |149.646865 |0.326733 |1.039604 |1.399340 |0.729373 |2.313531
|0.544554

|std |9.082101 |0.466011 |1.032052 |17.538143 |51.830751 |0.356198
|0.525860 |22.905161 |0.469794 |1.161075 |0.616226 |1.022606 |0.612277
|0.498835

|min |29.000000 |0.000000 |0.000000 |94.000000 |126.000000 |0.000000
|0.000000 |71.000000 |0.000000 |0.000000 |0.000000 |0.000000 |0.000000
|0.000000

|25% |47.500000 |0.000000 |0.000000 |120.000000 |211.000000 |0.000000
|0.000000 |133.500000 |0.000000 |0.000000 |1.000000 |0.000000 |2.000000
|0.000000

|50% |55.000000 |1.000000 |1.000000 |130.000000 |240.000000 |0.000000
|1.000000 |153.000000 |0.000000 |0.800000 |1.000000 |0.000000 |2.000000
|1.000000

|75% |61.000000 |1.000000 |2.000000 |140.000000 |274.500000 |0.000000
|1.000000 |166.000000 |1.000000 |1.600000 |2.000000 |1.000000 |3.000000
|1.000000

|max |77.000000 |1.000000 |3.000000 |200.000000 |564.000000 |1.000000
|2.000000 |202.000000 |1.000000 |6.200000 |2.000000 |4.000000 |3.000000
|1.000000
|===
----


+*In[754]:*+
[source, ipython3]
----
heart.nunique() #shows unique number of entries in each catagory
----


+*Out[754]:*+
----Age                       41
Sex                        2
ChestPainSeverity          4
RestingBloodPressure      49
Cholesterol              152
FastingBloodSugar          2
RestingECG                 3
MaximumHeartRate          91
ExerciseInducedAngina      2
OldPeak                   40
Slope                      3
ColoredVessels             5
ThalassemiaType            4
HeartAttack                2
dtype: int64----


+*In[755]:*+
[source, ipython3]
----
plt.figure(figsize=(12,6))
sns.countplot(y=heart['HeartAttack'])
plt.title('Individuals That Experienced a Heart Attack')
plt.xlabel('Number of Individuals')
plt.ylabel('Heart Attack')
plt.legend(["0 = No Attack, 1= Previous Attack"])

----


+*Out[755]:*+
----<matplotlib.legend.Legend at 0x1f7e1446220>
![png](output_9_1.png)
----


+*In[757]:*+
[source, ipython3]
----
plt.figure(figsize=(12,6))
sns.countplot(y=heart['ChestPainSeverity'])
plt.title('Individuals with Chest Pain')
plt.xlabel('Number of Individuals')
plt.ylabel('Chest Pain Severity')
plt.legend(["0 = None, 1= Minor, 2= Moderate, 3= Severe"])
----


+*Out[757]:*+
----<matplotlib.legend.Legend at 0x1f7e3e17970>
![png](output_10_1.png)
----


+*In[758]:*+
[source, ipython3]
----
plt.figure(figsize=(10,8))
plt.title('Cholesterol by Age')
plt.xlabel('Age')
plt.ylabel('Cholesterol')
plt.scatter(x='Age',y='Cholesterol',data=heart,marker='o')
plt.show()

----


+*Out[758]:*+
----
![png](output_11_0.png)
----


+*In[745]:*+
[source, ipython3]
----
plt.figure(figsize=(2,12))
plt.title('Relation between Heart Rate and Angina')
plt.xlabel('Exercise Induced Angina 0=No 1=Yes')
plt.ylabel('Maximum Heart Rate')
plt.scatter(x='ExerciseInducedAngina',y='MaximumHeartRate',data=heart,marker='o')
plt.show()
----


+*Out[745]:*+
----
![png](output_12_0.png)
----


+*In[729]:*+
[source, ipython3]
----
sns.relplot(x ='Age', y ='RestingBloodPressure', col = 'Sex', data = heart, color = 'Purple')
plt.xlabel('Age')
plt.ylabel('Resting Blood Pressure')
----


+*Out[729]:*+
----Text(376.9000000000001, 0.5, 'Resting Blood Pressure')
![png](output_13_1.png)
----


+*In[730]:*+
[source, ipython3]
----
sns.relplot(x ='Age', y ='MaximumHeartRate', col = 'Sex', data = heart, color = 'blue')
plt.xlabel('Age')
plt.ylabel('Maximum Heart Rate')
----


+*Out[730]:*+
----Text(376.9000000000001, 0.5, 'Maximum Heart Rate')
![png](output_14_1.png)
----


+*In[731]:*+
[source, ipython3]
----
x = heart.drop('HeartAttack',axis=1)         #Training the Data
y = heart['HeartAttack']
----


+*In[732]:*+
[source, ipython3]
----
x_TrainingSet, x_TestingSet = train_test_split(x,test_size=0.2, random_state=42)
----


+*In[733]:*+
[source, ipython3]
----
y_TrainingSet, y_TestingSet = train_test_split(y,test_size=0.2, random_state=42) #Answer to the Ultimate Question of Life...
----


+*In[734]:*+
[source, ipython3]
----
print('Training Set: {},{} '.format(x_TrainingSet.shape, y_TrainingSet.shape))
print('Testing Set: {},{} '.format(x_TestingSet.shape, y_TestingSet.shape))
----


+*Out[734]:*+
----
Training Set: (242, 13),(242,) 
Testing Set: (61, 13),(61,) 
----


+*In[735]:*+
[source, ipython3]
----
scale = StandardScaler()
x_TrainingSet = scale.fit_transform(x_TrainingSet)
x_TestingSet = scale.transform(x_TestingSet)
----


+*In[736]:*+
[source, ipython3]
----
knn = KNeighborsClassifier(n_neighbors=20)
 
knn.fit(x_TrainingSet, y_TrainingSet)
 
print(knn.predict(x_TestingSet))
----


+*Out[736]:*+
----
[0 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0 0 1 0 0 1 1 1 1 1 0 1 0 0 0 0 1 0 1
 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0]
----


+*In[737]:*+
[source, ipython3]
----
print(knn.score(x_TestingSet,y_TestingSet))
----


+*Out[737]:*+
----
0.9016393442622951
----


+*In[738]:*+
[source, ipython3]
----
neighbors = np.arange(13, 31)
training_accuracy = np.empty(len(neighbors))
testing_accuracy = np.empty(len(neighbors))

for x, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x_TrainingSet, y_TrainingSet)
     
    training_accuracy[x] = knn.score(x_TrainingSet, y_TrainingSet)
    testing_accuracy[x] = knn.score(x_TestingSet, y_TestingSet)
    
plt.plot(neighbors, testing_accuracy, label = 'Testing Accuracy')
plt.plot(neighbors, training_accuracy, label = 'Training Accuracy')
 
plt.xlabel('Nearest Neighbors')
plt.ylabel('Accuracy')
plt.legend()
plt.show()
----


+*Out[738]:*+
----
![png](output_22_0.png)
----


+*In[740]:*+
[source, ipython3]
----
dtc = DecisionTreeClassifier()

dtc.fit(x_TrainingSet,y_TrainingSet)
    
print(dtc.predict(x_TestingSet))
----


+*Out[740]:*+
----
[0 0 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0
 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0]
----


+*In[741]:*+
[source, ipython3]
----
print(dtc.score(x_TestingSet,y_TestingSet))
----


+*Out[741]:*+
----
0.819672131147541
----


+*In[ ]:*+
[source, ipython3]
----

----
